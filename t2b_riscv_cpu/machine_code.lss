
.temp.file.elf:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    d  .init	00000000 .init
00000054 l    d  .text	00000000 .text
02000000 l    d  .data	00000000 .data
02000000 l    d  .bss	00000000 .bss
02000000 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 tls.c
00000000 l    df *ABS*	00000000 
00000179 l       .debug_info	00000000 
00000179 l       .debug_info	00000000 
00000179 l       .debug_info	00000000 
00000179 l       .debug_info	00000000 
00000179 l       .debug_info	00000000 
00000179 l       .debug_info	00000000 
00000179 l       .debug_info	00000000 
00000179 l       .debug_info	00000000 
00000179 l       .debug_info	00000000 
00000179 l       .debug_info	00000000 
00000179 l       .debug_info	00000000 
00000179 l       .debug_info	00000000 
00000179 l       .debug_info	00000000 
00000179 l       .debug_info	00000000 
00000179 l       .debug_info	00000000 
00000179 l       .debug_info	00000000 
00000179 l       .debug_info	00000000 
00000179 l       .debug_info	00000000 
00000179 l       .debug_info	00000000 
00000179 l       .debug_info	00000000 
00000000 g       *ABS*	00000000 __data_size
02000800 g       .data	00000000 __global_pointer$
02000000 g       .bss	00000000 __tls_base
00000800 g       *ABS*	00000000 __flash_size
00000179  w      .debug_info	00000000 .hidden t1b_path_planner.c.b2c99740
00000040 g       *ABS*	00000000 __stack_size
00000000 g       *ABS*	00000000 __bss_size
00000424 g     F .text	00000024 memcpy
02000000 g       .bss	00000000 __bss_end
00000000 g       *ABS*	00000000 __tbss_size
0000041c g     F .text	00000008 _set_tls
00000000 g     F .init	00000000 _start
02000000 g       *ABS*	00000000 __ram
02000000 g       .bss	00000000 __data_end
00000464 g       .text	00000000 __text_end
02000000 g       .bss	00000000 __bss_start
00000448 g     F .text	0000001c memset
00000054 g     F .text	000003c8 main
00000100 g       *ABS*	00000000 __ram_size
02000100 g       .init	00000000 __stack
00000000 g     F *ABS*	00000000 vfscanf
00000468 g       *ABS*	00000000 __data_source
00000000 g       *ABS*	00000000 __flash
02000000 g       .data	00000000 __data_start
00000000 g     F *ABS*	00000000 vfprintf



Disassembly of section .init:

00000000 <_start>:
   0:	    02000117          	auipc	x2,0x2000
   4:	    10010113          	addi	x2,x2,256 # 2000100 <__stack>
   8:	    02000197          	auipc	x3,0x2000
   c:	    7f818193          	addi	x3,x3,2040 # 2000800 <__global_pointer$>
  10:	    02000517          	auipc	x10,0x2000
  14:	    ff050513          	addi	x10,x10,-16 # 2000000 <__bss_end>
  18:	    46800593          	addi	x11,x0,1128
  1c:	    00000613          	addi	x12,x0,0
  20:	    404000ef          	jal	x1,424 <memcpy>
  24:	    02000517          	auipc	x10,0x2000
  28:	    fdc50513          	addi	x10,x10,-36 # 2000000 <__bss_end>
  2c:	    00000593          	addi	x11,x0,0
  30:	    00000613          	addi	x12,x0,0
  34:	    414000ef          	jal	x1,448 <memset>
  38:	    02000517          	auipc	x10,0x2000
  3c:	    fc850513          	addi	x10,x10,-56 # 2000000 <__bss_end>
  40:	    3dc000ef          	jal	x1,41c <_set_tls>
  44:	    00000513          	addi	x10,x0,0
  48:	    00000593          	addi	x11,x0,0
  4c:	    008000ef          	jal	x1,54 <main>
  50:	/-- 0000006f          	jal	x0,50 <__stack_size+0x10>

Disassembly of section .text:

00000054 <main>:
     ###         _put_byte('\n');
     ### 
     ### */
     ### 
     ### // main function
     ### int main(int argc, char const *argv[]) {
  54:	             fd010113          	addi	x2,x2,-48
     ###     //                 {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},  
     ###     //                 {0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,2},  
     ###     //                 {0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,2,0}   
     ### // };
     ### uint16_t *map = (uint16_t*) 0x02000010;
     ### map[ 0 ] = 11 ;
  58:	             020007b7          	lui	x15,0x2000
     ### int main(int argc, char const *argv[]) {
  5c:	             02812623          	sw	x8,44(x2)
     ### map[ 0 ] = 11 ;
  60:	             00b00713          	addi	x14,x0,11
  64:	             00e79823          	sh	x14,16(x15) # 2000010 <__bss_end+0x10>
     ### map[ 1 ] = 301 ;
  68:	             12d00713          	addi	x14,x0,301
  6c:	             00e79923          	sh	x14,18(x15)
     ### map[ 2 ] = 321 ;
  70:	             14100713          	addi	x14,x0,321
  74:	             00e79a23          	sh	x14,20(x15)
     ### map[ 3 ] = 591 ;
  78:	             24f00713          	addi	x14,x0,591
  7c:	             00e79b23          	sh	x14,22(x15)
     ### map[ 4 ] = 611 ;
  80:	             26300713          	addi	x14,x0,611
  84:	             00e79c23          	sh	x14,24(x15)
     ### map[ 5 ] = 632 ;
  88:	             27800713          	addi	x14,x0,632
  8c:	             00e79d23          	sh	x14,26(x15)
     ### map[ 6 ] = 683 ;
  90:	             2ab00713          	addi	x14,x0,683
  94:	             00e79e23          	sh	x14,28(x15)
     ### map[ 7 ] = 922 ;
  98:	             39a00713          	addi	x14,x0,922
  9c:	             00e79f23          	sh	x14,30(x15)
     ### map[ 8 ] = 943 ;
  a0:	             3af00713          	addi	x14,x0,943
  a4:	             02e79023          	sh	x14,32(x15)
     ### map[ 9 ] = 1186 ;
  a8:	             4a200713          	addi	x14,x0,1186
  ac:	             02e79123          	sh	x14,34(x15)
     ### map[ 10 ] = 1233 ;
  b0:	             4d100713          	addi	x14,x0,1233
  b4:	             02e79223          	sh	x14,36(x15)
     ### map[ 11 ] = 1251 ;
  b8:	             4e300713          	addi	x14,x0,1251
  bc:	             02e79323          	sh	x14,38(x15)
     ### map[ 12 ] = 1264 ;
  c0:	             4f000713          	addi	x14,x0,1264
  c4:	             02e79423          	sh	x14,40(x15)
     ### map[ 13 ] = 1541 ;
  c8:	             60500713          	addi	x14,x0,1541
  cc:	             02e79523          	sh	x14,42(x15)
     ### map[ 14 ] = 1844 ;
  d0:	             73400713          	addi	x14,x0,1844
  d4:	             02e79623          	sh	x14,44(x15)
     ### map[ 15 ] = 1874 ;
  d8:	             75200713          	addi	x14,x0,1874
  dc:	             02e79723          	sh	x14,46(x15)
     ### map[ 16 ] = 2164 ;
  e0:	             00001737          	lui	x14,0x1
  e4:	             87470693          	addi	x13,x14,-1932 # 874 <__flash_size+0x74>
  e8:	             02d79823          	sh	x13,48(x15)
     ### map[ 17 ] = 2423 ;
  ec:	             97770693          	addi	x13,x14,-1673
  f0:	             02d79923          	sh	x13,50(x15)
     ### map[ 18 ] = 2471 ;
  f4:	             9a770693          	addi	x13,x14,-1625
  f8:	             02d79a23          	sh	x13,52(x15)
     ### map[ 19 ] = 2491 ;
  fc:	             9bb70693          	addi	x13,x14,-1605
 100:	             02d79b23          	sh	x13,54(x15)
     ### map[ 20 ] = 2523 ;
 104:	             9db70693          	addi	x13,x14,-1573
 108:	             02d79c23          	sh	x13,56(x15)
     ### map[ 21 ] = 2781 ;
 10c:	             add70693          	addi	x13,x14,-1315
 110:	             02d79d23          	sh	x13,58(x15)
     ### map[ 22 ] = 2801 ;
 114:	             af170693          	addi	x13,x14,-1295
 118:	             02d79e23          	sh	x13,60(x15)
     ### map[ 23 ] = 2811 ;
 11c:	             afb70693          	addi	x13,x14,-1285
 120:	             02d79f23          	sh	x13,62(x15)
     ### map[ 24 ] = 3091 ;
 124:	             c1370693          	addi	x13,x14,-1005
 128:	             04d79023          	sh	x13,64(x15)
     ### map[ 25 ] = 3391 ;
 12c:	             d3f70693          	addi	x13,x14,-705
 130:	             04d79123          	sh	x13,66(x15)
     ### map[ 26 ] = 3983 ;
 134:	             f8f70693          	addi	x13,x14,-113
 138:	             04d79223          	sh	x13,68(x15)
     ### map[ 27 ] = 3736 ;
 13c:	             e9870693          	addi	x13,x14,-360
 140:	             04d79323          	sh	x13,70(x15)
     ### map[ 28 ] = 3796 ;
 144:	             ed470693          	addi	x13,x14,-300
 148:	             04d79423          	sh	x13,72(x15)
     ### map[ 29 ] = 4026 ;
 14c:	             fba70693          	addi	x13,x14,-70
 150:	             04d79523          	sh	x13,74(x15)
     ### map[ 30 ] = 4045 ;
 154:	             fcd70693          	addi	x13,x14,-51
 158:	             04d79623          	sh	x13,76(x15)
     ### map[ 31 ] = 4335 ;
 15c:	             0ef70693          	addi	x13,x14,239
 160:	             04d79723          	sh	x13,78(x15)
     ### map[ 32 ] = 4351 ;
 164:	             0ff70693          	addi	x13,x14,255
 168:	             04d79823          	sh	x13,80(x15)
     ### map[ 33 ] = 4364 ;
 16c:	             10c70693          	addi	x13,x14,268
 170:	             04d79923          	sh	x13,82(x15)
     ### map[ 34 ] = 4641 ;
 174:	             22170693          	addi	x13,x14,545
 178:	             04d79a23          	sh	x13,84(x15)
     ### map[ 35 ] = 4944 ;
 17c:	             35070693          	addi	x13,x14,848
 180:	             04d79b23          	sh	x13,86(x15)
     ### map[ 36 ] = 4971 ;
 184:	             36b70693          	addi	x13,x14,875
 188:	             04d79c23          	sh	x13,88(x15)
     ### map[ 37 ] = 4985 ;
 18c:	             37970693          	addi	x13,x14,889
 190:	             04d79d23          	sh	x13,90(x15)
     ### map[ 38 ] = 5261 ;
 194:	             48d70693          	addi	x13,x14,1165
 198:	             04d79e23          	sh	x13,92(x15)
     ### map[ 39 ] = 5565 ;
 19c:	             5bd70693          	addi	x13,x14,1469
 1a0:	             04d79f23          	sh	x13,94(x15)
     ### map[ 40 ] = 5596 ;
 1a4:	             5dc70693          	addi	x13,x14,1500
 1a8:	             06d79023          	sh	x13,96(x15)
     ### map[ 41 ] = 5826 ;
 1ac:	             6c270693          	addi	x13,x14,1730
     ### map[ 42 ] = 5886 ;
 1b0:	             6fe70713          	addi	x14,x14,1790
 1b4:	             06e79223          	sh	x14,100(x15)
     ### map[ 43 ] = 6193 ;
 1b8:	             00002737          	lui	x14,0x2
     ### map[ 41 ] = 5826 ;
 1bc:	             06d79123          	sh	x13,98(x15)
     ### map[ 43 ] = 6193 ;
 1c0:	             83170693          	addi	x13,x14,-1999 # 1831 <__flash_size+0x1031>
 1c4:	             06d79323          	sh	x13,102(x15)
     ### map[ 44 ] = 6211 ;
 1c8:	             84370693          	addi	x13,x14,-1981
 1cc:	             06d79423          	sh	x13,104(x15)
     ### map[ 45 ] = 6241 ;
 1d0:	             86170693          	addi	x13,x14,-1951
 1d4:	             06d79523          	sh	x13,106(x15)
     ### map[ 46 ] = 6293 ;
 1d8:	             89570693          	addi	x13,x14,-1899
 1dc:	             06d79623          	sh	x13,108(x15)
     ### map[ 47 ] = 6501 ;
 1e0:	             96570693          	addi	x13,x14,-1691
 1e4:	             06d79723          	sh	x13,110(x15)
     ### map[ 48 ] = 6521 ;
 1e8:	             97970693          	addi	x13,x14,-1671
 1ec:	             06d79823          	sh	x13,112(x15)
     ### map[ 49 ] = 6531 ;
 1f0:	             98370693          	addi	x13,x14,-1661
 1f4:	             06d79923          	sh	x13,114(x15)
     ### map[ 50 ] = 6811 ;
 1f8:	             a9b70693          	addi	x13,x14,-1381
 1fc:	             06d79a23          	sh	x13,116(x15)
     ### map[ 51 ] = 7111 ;
 200:	             bc770693          	addi	x13,x14,-1081
 204:	             06d79b23          	sh	x13,118(x15)
     ### map[ 52 ] = 7401 ;
 208:	             ce970693          	addi	x13,x14,-791
 20c:	             06d79c23          	sh	x13,120(x15)
     ### map[ 53 ] = 7454 ;
 210:	             d1e70693          	addi	x13,x14,-738
 214:	             06d79d23          	sh	x13,122(x15)
     ### map[ 54 ] = 7744 ;
 218:	             e4070693          	addi	x13,x14,-448
 21c:	             06d79e23          	sh	x13,124(x15)
     ### map[ 55 ] = 7764 ;
 220:	             e5470693          	addi	x13,x14,-428
 224:	             06d79f23          	sh	x13,126(x15)
     ### map[ 56 ] = 8054 ;
 228:	             f7670693          	addi	x13,x14,-138
 22c:	             08d79023          	sh	x13,128(x15)
     ### map[ 57 ] = 8071 ;
 230:	             f8770693          	addi	x13,x14,-121
 234:	             08d79123          	sh	x13,130(x15)
     ### map[ 58 ] = 8083 ;
 238:	             f9370693          	addi	x13,x14,-109
 23c:	             08d79223          	sh	x13,132(x15)
     ### map[ 59 ] = 8361 ;
 240:	             0a970693          	addi	x13,x14,169
 244:	             08d79323          	sh	x13,134(x15)
     ### map[ 60 ] = 8436 ;
 248:	             0f470693          	addi	x13,x14,244
 24c:	             08d79423          	sh	x13,136(x15)
     ### map[ 61 ] = 8663 ;
 250:	             1d770693          	addi	x13,x14,471
 254:	             08d79523          	sh	x13,138(x15)
     ### map[ 62 ] = 8692 ;
 258:	             1f470693          	addi	x13,x14,500
 25c:	             08d79623          	sh	x13,140(x15)
     ### map[ 63 ] = 8711 ;
 260:	             20770693          	addi	x13,x14,519
 264:	             08d79723          	sh	x13,142(x15)
     ### map[ 64 ] = 8903 ;
 268:	             2c770693          	addi	x13,x14,711
     ### map[ 65 ] = 8982 ;
 26c:	             31670713          	addi	x14,x14,790
     ### map[ 64 ] = 8903 ;
 270:	             08d79823          	sh	x13,144(x15)
     ### map[ 65 ] = 8982 ;
 274:	             08e79923          	sh	x14,146(x15)
     ### uint8_t *parent =  (uint8_t*) 0x020000D2;                        // to check which node has been analysed
     ### bool *checked = (bool*) 0x020000B4;                      // bool array(true=node_checked false=node_unchecked)
     ### uint8_t *node_dist = ( uint8_t* ) 0x02000096;                     // to store distance between nodes while calculating path
     ### uint8_t temp;
     ### uint8_t mapped;
     ###     for (uint8_t b = 0; b < 30; b++)        //initialize parent & checked array at infi. dist.(relatively large) for all nodes & no node checked
 278:	             02000737          	lui	x14,0x2000
     ### int main(int argc, char const *argv[]) {
 27c:	             00000593          	addi	x11,x0,0
     ### map[ 65 ] = 8982 ;
 280:	             09678793          	addi	x15,x15,150
     ###     {
     ###         node_dist[b]= 255;            
 284:	             fff00693          	addi	x13,x0,-1
     ###     for (uint8_t b = 0; b < 30; b++)        //initialize parent & checked array at infi. dist.(relatively large) for all nodes & no node checked
 288:	             0b470613          	addi	x12,x14,180 # 20000b4 <__bss_end+0xb4>
     ###         node_dist[b]= 255;            
 28c:	         /-> 00d78023          	sb	x13,0(x15)
     ###         checked[b]=false;
 290:	         |   00078f23          	sb	x0,30(x15)
     ###     for (uint8_t b = 0; b < 30; b++)        //initialize parent & checked array at infi. dist.(relatively large) for all nodes & no node checked
 294:	         |   00178793          	addi	x15,x15,1
 298:	         \-- fec79ae3          	bne	x15,x12,28c <t1b_path_planner.c.b2c99740+0x113>
     ###     }
     ###     node_dist[END_POINT]=0;            // set all indexes to start values in node_dist and parent arrays
 29c:	             00474783          	lbu	x15,4(x14)
     ###     parent[END_POINT]=255;
 2a0:	             01d00513          	addi	x10,x0,29
     ###     for (uint8_t j = 0; j < 29; j++){        //runs 29 times for 29 relations(30 nodes , 29 relations)
     ###         uint8_t min_val = 255, min_index;
     ###         for (int k = 0; k < 30; k++)
 2a4:	             01e00893          	addi	x17,x0,30
     ###     node_dist[END_POINT]=0;            // set all indexes to start values in node_dist and parent arrays
 2a8:	             0ff7f793          	andi	x15,x15,255
 2ac:	             00f707b3          	add	x15,x14,x15
 2b0:	             08078b23          	sb	x0,150(x15)
     ###     parent[END_POINT]=255;
 2b4:	             00474783          	lbu	x15,4(x14)
     ###             if(checked[k]==false&&node_dist[k]<=min_val){        // checking condition for shortest dist
     ###                 min_val=node_dist[k];
     ###                 min_index=k;
     ###             }
     ###         }
     ###         checked[min_index]=true;
 2b8:	             00100e13          	addi	x28,x0,1
 2bc:	             ff600e93          	addi	x29,x0,-10
     ###     parent[END_POINT]=255;
 2c0:	             0ff7f793          	andi	x15,x15,255
 2c4:	             00f70733          	add	x14,x14,x15
 2c8:	             0cd70923          	sb	x13,210(x14)
     ###             if(checked[k]==false&&node_dist[k]<=min_val){        // checking condition for shortest dist
 2cc:	             020006b7          	lui	x13,0x2000
     ###         for (uint8_t l = 0; l < 30; l++){
     ###             for (uint8_t y = 0; y < 65; y++) {
     ###                 uint8_t tempo = map[y] - (min_index * 30 + l) * 10;
     ###                 if (tempo >= 0 && tempo < 10) {
 2d0:	             00900f13          	addi	x30,x0,9
     ###             for (uint8_t y = 0; y < 65; y++) {
 2d4:	             09268293          	addi	x5,x13,146 # 2000092 <__bss_end+0x92>
     ###                 mapped = tempo;
     ###                 break;
     ###                 } else mapped = 0;
     ###             } 
     ###             if(!checked[l]&&mapped && node_dist[min_index]+mapped < node_dist[l]){
 2d8:	             09668393          	addi	x7,x13,150
     ###         for (uint8_t l = 0; l < 30; l++){
 2dc:	             0f068f93          	addi	x31,x13,240
     ###         for (int k = 0; k < 30; k++)
 2e0:	/----------> 00000793          	addi	x15,x0,0
     ###         uint8_t min_val = 255, min_index;
 2e4:	|            0ff00713          	addi	x14,x0,255
     ###             if(checked[k]==false&&node_dist[k]<=min_val){        // checking condition for shortest dist
 2e8:	|     /----> 00f68633          	add	x12,x13,x15
 2ec:	|     |      0b464803          	lbu	x16,180(x12)
 2f0:	|     |  /-- 00081a63          	bne	x16,x0,304 <t1b_path_planner.c.b2c99740+0x18b>
 2f4:	|     |  |   09664603          	lbu	x12,150(x12)
 2f8:	|     |  +-- 00c76663          	bltu	x14,x12,304 <t1b_path_planner.c.b2c99740+0x18b>
     ###                 min_index=k;
 2fc:	|     |  |   0ff7f593          	andi	x11,x15,255
     ###             if(checked[k]==false&&node_dist[k]<=min_val){        // checking condition for shortest dist
 300:	|     |  |   00060713          	addi	x14,x12,0
     ###         for (int k = 0; k < 30; k++)
 304:	|     |  \-> 00178793          	addi	x15,x15,1
 308:	|     \----- ff1790e3          	bne	x15,x17,2e8 <t1b_path_planner.c.b2c99740+0x16f>
     ###                 uint8_t tempo = map[y] - (min_index * 30 + l) * 10;
 30c:	|            03158733          	mul	x14,x11,x17
     ###         checked[min_index]=true;
 310:	|            00b687b3          	add	x15,x13,x11
 314:	|            0bc78a23          	sb	x28,180(x15)
     ###                 uint8_t tempo = map[y] - (min_index * 30 + l) * 10;
 318:	|            0d268613          	addi	x12,x13,210
     ###             if(!checked[l]&&mapped && node_dist[min_index]+mapped < node_dist[l]){
 31c:	|            00758333          	add	x6,x11,x7
 320:	|            03d70733          	mul	x14,x14,x29
 324:	|            0ff77713          	andi	x14,x14,255
     ###             if(checked[k]==false&&node_dist[k]<=min_val){        // checking condition for shortest dist
 328:	|  /-------> 01068813          	addi	x16,x13,16
     ###                 uint8_t tempo = map[y] - (min_index * 30 + l) * 10;
 32c:	|  |  /----> 00085783          	lhu	x15,0(x16) # 2000000 <__bss_end>
 330:	|  |  |      00f707b3          	add	x15,x14,x15
 334:	|  |  |      0ff7f793          	andi	x15,x15,255
     ###                 if (tempo >= 0 && tempo < 10) {
 338:	|  |  |  /-- 00ff7863          	bgeu	x30,x15,348 <t1b_path_planner.c.b2c99740+0x1cf>
     ###             for (uint8_t y = 0; y < 65; y++) {
 33c:	|  |  |  |   00280813          	addi	x16,x16,2
 340:	|  |  \--|-- fe5816e3          	bne	x16,x5,32c <t1b_path_planner.c.b2c99740+0x1b3>
     ###                 } else mapped = 0;
 344:	|  |     |   00000793          	addi	x15,x0,0
     ###             if(!checked[l]&&mapped && node_dist[min_index]+mapped < node_dist[l]){
 348:	|  |     \-> fe264803          	lbu	x16,-30(x12)
 34c:	|  |     /-- 02081463          	bne	x16,x0,374 <t1b_path_planner.c.b2c99740+0x1fb>
 350:	|  |     +-- 02078263          	beq	x15,x0,374 <t1b_path_planner.c.b2c99740+0x1fb>
 354:	|  |     |   00034803          	lbu	x16,0(x6)
 358:	|  |     |   fc464403          	lbu	x8,-60(x12)
 35c:	|  |     |   00f80833          	add	x16,x16,x15
 360:	|  |     +-- 00885a63          	bge	x16,x8,374 <t1b_path_planner.c.b2c99740+0x1fb>
     ###                 parent[l]=min_index;
 364:	|  |     |   00b60023          	sb	x11,0(x12)
     ###                 node_dist[l]=node_dist[min_index]+mapped;
 368:	|  |     |   00034803          	lbu	x16,0(x6)
 36c:	|  |     |   010787b3          	add	x15,x15,x16
 370:	|  |     |   fcf60223          	sb	x15,-60(x12)
     ###         for (uint8_t l = 0; l < 30; l++){
 374:	|  |     \-> ff670713          	addi	x14,x14,-10
 378:	|  |         00160613          	addi	x12,x12,1
 37c:	|  |         0ff77713          	andi	x14,x14,255
 380:	|  \-------- fbf614e3          	bne	x12,x31,328 <t1b_path_planner.c.b2c99740+0x1af>
     ###     for (uint8_t j = 0; j < 29; j++){        //runs 29 times for 29 relations(30 nodes , 29 relations)
 384:	|            fff50513          	addi	x10,x10,-1
 388:	|            0ff57513          	andi	x10,x10,255
 38c:	\----------- f4051ae3          	bne	x10,x0,2e0 <t1b_path_planner.c.b2c99740+0x167>
     ###             }
     ###         }
     ###     }
     ###     temp=START_POINT;
 390:	             020007b7          	lui	x15,0x2000
 394:	             0007c703          	lbu	x14,0(x15) # 2000000 <__bss_end>
     ###    
     ###     for(uint8_t z=0;z<30;z++){                        // loop to print planned path
     ###         if(parent[temp]==255)
 398:	             02000837          	lui	x16,0x2000
     ###     temp=START_POINT;
 39c:	             00000793          	addi	x15,x0,0
 3a0:	             0ff77713          	andi	x14,x14,255
     ###         if(parent[temp]==255)
 3a4:	             0ff00893          	addi	x17,x0,255
     ###     for(uint8_t z=0;z<30;z++){                        // loop to print planned path
 3a8:	             01e00513          	addi	x10,x0,30
     ###         if(parent[temp]==255)
 3ac:	/----------> 00070693          	addi	x13,x14,0
 3b0:	|            00e80733          	add	x14,x16,x14
 3b4:	|            0d274703          	lbu	x14,210(x14)
 3b8:	|            00178593          	addi	x11,x15,1
 3bc:	|            0ff5f613          	andi	x12,x11,255
 3c0:	|     /----- 05171263          	bne	x14,x17,404 <t1b_path_planner.c.b2c99740+0x28b>
     ###         { path_planned[z]=(temp);
 3c4:	|     |      02010713          	addi	x14,x2,32
 3c8:	|     |      00f707b3          	add	x15,x14,x15
 3cc:	|     |      fed78023          	sb	x13,-32(x15)
     ### 
     ### 
     ###     // ##############################################
     ### 
     ###     // the node values are written into data memory sequentially.
     ###     for (int i = 0; i < idx; ++i) {
 3d0:	|  /--|----> 00000793          	addi	x15,x0,0
     ###         NODE_POINT = path_planned[i];
 3d4:	|  |  |      02000737          	lui	x14,0x2000
 3d8:	|  |  |  /-> 00f106b3          	add	x13,x2,x15
 3dc:	|  |  |  |   0006c683          	lbu	x13,0(x13)
     ###     for (int i = 0; i < idx; ++i) {
 3e0:	|  |  |  |   00178793          	addi	x15,x15,1
     ###         NODE_POINT = path_planned[i];
 3e4:	|  |  |  |   00d70423          	sb	x13,8(x14) # 2000008 <__bss_end+0x8>
     ###     for (int i = 0; i < idx; ++i) {
 3e8:	|  |  |  \-- fec7c8e3          	blt	x15,x12,3d8 <t1b_path_planner.c.b2c99740+0x25f>
     ###     }
     ###     // Path Planning Computation Done Flag
     ###     CPU_DONE = 1;
 3ec:	|  |  |      00100793          	addi	x15,x0,1
 3f0:	|  |  |      00f70623          	sb	x15,12(x14)
     ###         _put_str("################################\n");
     ### 
     ###     #endif
     ### 
     ###     return 0;
     ### }
 3f4:	|  |  |      02c12403          	lw	x8,44(x2)
 3f8:	|  |  |      00000513          	addi	x10,x0,0
 3fc:	|  |  |      03010113          	addi	x2,x2,48
 400:	|  |  |      00008067          	jalr	x0,0(x1)
     ###         path_planned[z]=(temp);
 404:	|  |  \----> 00f107b3          	add	x15,x2,x15
 408:	|  |         00d78023          	sb	x13,0(x15)
     ###     for(uint8_t z=0;z<30;z++){                        // loop to print planned path
 40c:	|  |         00058793          	addi	x15,x11,0
 410:	\--|-------- f8a59ee3          	bne	x11,x10,3ac <t1b_path_planner.c.b2c99740+0x233>
 414:	   |         01e00613          	addi	x12,x0,30
 418:	   \-------- fb9ff06f          	jal	x0,3d0 <t1b_path_planner.c.b2c99740+0x257>

0000041c <_set_tls>:
 41c:	00050213          	addi	x4,x10,0
 420:	00008067          	jalr	x0,0(x1)

00000424 <memcpy>:
 424:	       00050313          	addi	x6,x10,0
 428:	/----- 00060e63          	beq	x12,x0,444 <memcpy+0x20>
 42c:	|  /-> 00058383          	lb	x7,0(x11)
 430:	|  |   00730023          	sb	x7,0(x6)
 434:	|  |   fff60613          	addi	x12,x12,-1
 438:	|  |   00130313          	addi	x6,x6,1
 43c:	|  |   00158593          	addi	x11,x11,1
 440:	|  \-- fe0616e3          	bne	x12,x0,42c <memcpy+0x8>
 444:	\----> 00008067          	jalr	x0,0(x1)

00000448 <memset>:
 448:	       00050313          	addi	x6,x10,0
 44c:	/----- 00060a63          	beq	x12,x0,460 <memset+0x18>
 450:	|  /-> 00b30023          	sb	x11,0(x6)
 454:	|  |   fff60613          	addi	x12,x12,-1
 458:	|  |   00130313          	addi	x6,x6,1
 45c:	|  \-- fe061ae3          	bne	x12,x0,450 <memset+0x8>
 460:	\----> 00008067          	jalr	x0,0(x1)

00000464 <__text_end>:
 464:	0000                	c.unimp
	...

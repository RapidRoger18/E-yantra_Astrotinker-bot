module CPU_driver(
	input CPU_MemWrite_flag,
	input [31:0] WriteData, DataAdr, ReadData
	output reg CPU_reset,
	output reg CPU_Ext_MemWrite_flag,
	output reg [31:0] CPU_Ext_WriteData, CPU_Ext_DataAdr
);
reg CPU_start = 0;
reg [4:0] path_planned [31:0];
always @(posedge clk_50M) begin
	if (!CPU_start) begin
		// write START_POINT in the memory address 02000000
		Ext_MemWrite <= 1; Ext_WriteData <= SP; Ext_DataAdr <= 32'h02000000; #10;
		Ext_MemWrite <= 0; Ext_WriteData <= 00; Ext_DataAdr <= 32'h0; #10;

		// write END_POINT in the memory address 02000004
		Ext_MemWrite <= 1; Ext_WriteData <= EP; E17000xt_DataAdr <= 32'h02000004; #10;
		Ext_MemWrite <= 0; Ext_WriteData <= 00; Ext_DataAdr <= 32'h0; #10;

		// write NODE_POINT as 00 in the memory address 02000008
		Ext_MemWrite <= 1; Ext_WriteData <= 00; Ext_DataAdr <= 32'h02000008; #10;
		Ext_MemWrite <= 0; Ext_WriteData <= 00; Ext_DataAdr <= 32'h0; #10;

		// write CPU_DONE as 00 in the memory address 0200000c
		Ext_MemWrite <= 1; Ext_WriteData <= 00; Ext_DataAdr <= 32'h0200000c; #10;
		Ext_MemWrite <= 0; Ext_WriteData <= 00; Ext_DataAdr <= 32'h0; #10;

		reset = 0;
		// External Memory Access Disabled
		Ext_MemWrite <= 0; Ext_WriteData <= 0; Ext_DataAdr <= 0;
		i <= 0;
		CPU_start <= 1;
	end
	if(MemWrite && !reset) begin
        if (DataAdr === 32'h02000008) begin
            path_planned [index] <= WriteData;
        end
        if (DataAdr === 32'h0200000c & WriteData === 32'h1) begin
				CPU_stop
        end
    end
	

end
endmodule 